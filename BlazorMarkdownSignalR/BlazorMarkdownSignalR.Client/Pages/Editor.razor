@page "/editor"
@rendermode InteractiveAuto
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Editor MD</PageTitle>

<h1>Markdown Editor</h1>


<div class="col-md-12">
    <MarkdownEditor @bind-Value="@markdownValue"
                    ValueHTMLChanged="@OnMarkdownValueHTMLChanged"
                    SpellChecker="false"
                    @ref="Markdown" />

    <hr />

    <h3>Result</h3>
    @((MarkupString)markdownHtml)

    <div>
        <ul>
            @foreach (var item in messages)
            {
                <li>@item</li>
            }
        </ul>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>(){""};
    MarkdownEditor Markdown=new();
    string markdownValue = string.Empty;
    string markdownHtml = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
           .WithUrl(Navigation.ToAbsoluteUri("/editorhub"))
           .Build();

        hubConnection.On<string>("ReceiveMarkdown", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);            
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }


    public async Task Update()
    {
        await Markdown.SetValueAsync(messages.Last()??"");
        await InvokeAsync(StateHasChanged);
    }

    Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = value;
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendMarkdown", markdownValue);
        }
        return Task.CompletedTask;
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() 
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}